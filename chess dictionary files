print('NAME: Hruthik BM', 'USN: 1AY24AI046')

def is_valid_chess_board(board):
piece_count = {
'wking': 0, 'bking': 0,
'wpawn': 0, 'bpawn': 0
}
white_pieces = 0
black_pieces = 0

valid_files = 'abcdefgh'
valid_ranks = '12345678'
valid_positions = {f + r for f in valid_files for r in valid_ranks}
valid_pieces = {'pawn', 'knight', 'bishop', 'rook', 'queen', 'king'}

for position, piece in board.items():
if position not in valid_positions:
print(f"Invalid board position: {position}")
return False
if not (piece.startswith('w') or piece.startswith('b')):
print(f"Invalid piece color: {piece}")
return False
if piece[1:] not in valid_pieces:
print(f"Invalid piece type: {piece}")
return False

# Count kings
if piece == 'wking':
piece_count['wking'] += 1
elif piece == 'bking':
piece_count['bking'] += 1

# Count pawns
if piece == 'wpawn':
piece_count['wpawn'] += 1
elif piece == 'bpawn':
piece_count['bpawn'] += 1

# Total pieces
if piece.startswith('w'):
white_pieces += 1
else:
black_pieces += 1

if piece_count['wking'] != 1 or piece_count['bking'] != 1:
print("Each side must have exactly one king.")
return False
if piece_count['wpawn'] > 8 or piece_count['bpawn'] > 8:
print("Too many pawns.")
return False
if white_pieces > 16 or black_pieces > 16:
print("Too many pieces on one side.")
return False

return True

# Sample board dictionary
chess_board = {
'1h': 'bking', '6c': 'wqueen', '2g': 'bbishop', '5h': 'bqueen',
'3e': 'wking', '4e': 'wpawn', '2d': 'wpawn', '7a': 'wpawn'
}

print("Is the chess board valid?", is_valid_chess_board(chess_board))
output.
